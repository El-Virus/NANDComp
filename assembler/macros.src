#Simulator
&STOP = 1
&HOLD = 2
&DUMP = 4
&CLRS = 8

%SIM $$
MACH ,(0xC000 | $|$)
%%

#The Nand Game
&SP = 0

%INIT_STACK
A = 0x100
D = A
A = SP
*A = D
%%

#This has 4 instructions
%PUSH_D
A = SP
*A = *A + 1
A = *A - 1
*A = D
%%

%POP_D
A = SP
*A = *A - 1
A = *A
D = *A
%%

%POP_A
A = SP
*A = *A - 1
A = *A
A = *A
%%

#This has 2 + PUSH_D instructions
%PUSH_VALUE $value
A = $value
D = A
PUSH_D
%%

%ADD
POP_D
POP_A
D = D + A
PUSH_D
%%

%SUB
POP_D
POP_A
D = A - D
PUSH_D
%%

%NEG
POP_D
D = -D
PUSH_D
%%

%AND
POP_D
POP_A
D = D & A
PUSH_D
%%

%OR
POP_D
POP_A
D = D | A
PUSH_D
%%

%EQ
POP_D
POP_A
D = D - A
A = true
D; JEQ
D = 0
A = end
JMP
LABEL true
D = -1
LABEL end
PUSH_D
%%

%GT
POP_D
POP_A
D = D - A
A = true
D; JGT
D = 0
A = end
JMP
LABEL true
D = -1
LABEL end
PUSH_D
%%

%LT
POP_D
POP_A
D = D - A
A = true
D; JLT
D = 0
A = end
JMP
LABEL true
D = -1
LABEL end
PUSH_D
%%

%NOT
POP_D
D = ~D
PUSH_D
%%

%GOTO $label
A = $label
JMP
%%

%IF_GOTO $label
POP_D
A = $label
D; JNE
%%

%PUSH_MEMORY
POP_A
D = *A
PUSH_D
%%

%POP_MEMORY
POP_D
POP_A
*A = D
%%

%PUSH_STATIC $address
A = $address
D = *A
PUSH_D
%%

%POP_STATIC $address
POP_D
A = $address
*A = D
%%

#Note how the macros below are implemented in a different way from the ones defined by The Nand Game

%CALL $function $$
PUSH_VALUE ,( . + ($C$ + 2) * 6 + 2)
PUSH_VALUE $F$
PUSH_VALUE $C$
A = $function
JMP
%%

%RETURN
POP_D
A = SP
*A = *A - D
POP_A
JMP
%%

#Auxiliar helper macro: $reg = STACK[SP - 1 - $offset]
%STACK_AT $offset $reg
A = $offset
D = A + 1
A = SP
A = *A
A = A - D
$reg = *A
%%